# source: https://us1.prisma.sh/mitchell-monaghan-704942/poc-prisma/dev
# timestamp: Thu Oct 18 2018 17:44:00 GMT-0500 (Central Daylight Time)

type AggregateNotification {
  count: Int!
}

type AggregatePermission {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createPermission(data: PermissionCreateInput!): Permission!
  createNotification(data: NotificationCreateInput!): Notification!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updatePermission(data: PermissionUpdateInput!, where: PermissionWhereUniqueInput!): Permission
  updateNotification(data: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification
  deleteUser(where: UserWhereUniqueInput!): User
  deletePermission(where: PermissionWhereUniqueInput!): Permission
  deleteNotification(where: NotificationWhereUniqueInput!): Notification
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertPermission(where: PermissionWhereUniqueInput!, create: PermissionCreateInput!, update: PermissionUpdateInput!): Permission!
  upsertNotification(where: NotificationWhereUniqueInput!, create: NotificationCreateInput!, update: NotificationUpdateInput!): Notification!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyPermissions(data: PermissionUpdateInput!, where: PermissionWhereInput): BatchPayload!
  updateManyNotifications(data: NotificationUpdateInput!, where: NotificationWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyPermissions(where: PermissionWhereInput): BatchPayload!
  deleteManyNotifications(where: NotificationWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Notification implements Node {
  id: ID!
  notificationType: NotificationType!
  data: String!
  viewed: Boolean!
  createdBy: User!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type NotificationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NotificationEdge]!
  aggregate: AggregateNotification!
}

input NotificationCreateInput {
  notificationType: NotificationType!
  data: String
  viewed: Boolean
  createdBy: UserCreateOneWithoutNotificationsInput!
}

input NotificationCreateManyWithoutCreatedByInput {
  create: [NotificationCreateWithoutCreatedByInput!]
  connect: [NotificationWhereUniqueInput!]
}

input NotificationCreateWithoutCreatedByInput {
  notificationType: NotificationType!
  data: String
  viewed: Boolean
}

"""An edge in a connection."""
type NotificationEdge {
  """The item at the end of the edge."""
  node: Notification!

  """A cursor for use in pagination."""
  cursor: String!
}

enum NotificationOrderByInput {
  id_ASC
  id_DESC
  notificationType_ASC
  notificationType_DESC
  data_ASC
  data_DESC
  viewed_ASC
  viewed_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type NotificationPreviousValues {
  id: ID!
  notificationType: NotificationType!
  data: String!
  viewed: Boolean!
  createdAt: DateTime!
}

type NotificationSubscriptionPayload {
  mutation: MutationType!
  node: Notification
  updatedFields: [String!]
  previousValues: NotificationPreviousValues
}

input NotificationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [NotificationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [NotificationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NotificationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NotificationWhereInput
}

enum NotificationType {
  WELCOME
  INVITE_ACCEPTED
  PASSWORD_CHANGED
  USER_SETTINGS_UPDATED
  PLEASE_CHANGE_YOUR_PASSWORD
}

input NotificationUpdateInput {
  notificationType: NotificationType
  data: String
  viewed: Boolean
  createdBy: UserUpdateOneRequiredWithoutNotificationsInput
}

input NotificationUpdateManyWithoutCreatedByInput {
  create: [NotificationCreateWithoutCreatedByInput!]
  connect: [NotificationWhereUniqueInput!]
  disconnect: [NotificationWhereUniqueInput!]
  delete: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [NotificationUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input NotificationUpdateWithoutCreatedByDataInput {
  notificationType: NotificationType
  data: String
  viewed: Boolean
}

input NotificationUpdateWithWhereUniqueWithoutCreatedByInput {
  where: NotificationWhereUniqueInput!
  data: NotificationUpdateWithoutCreatedByDataInput!
}

input NotificationUpsertWithWhereUniqueWithoutCreatedByInput {
  where: NotificationWhereUniqueInput!
  update: NotificationUpdateWithoutCreatedByDataInput!
  create: NotificationCreateWithoutCreatedByInput!
}

input NotificationWhereInput {
  """Logical AND on all given filters."""
  AND: [NotificationWhereInput!]

  """Logical OR on all given filters."""
  OR: [NotificationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NotificationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  notificationType: NotificationType

  """All values that are not equal to given value."""
  notificationType_not: NotificationType

  """All values that are contained in given list."""
  notificationType_in: [NotificationType!]

  """All values that are not contained in given list."""
  notificationType_not_in: [NotificationType!]
  data: String

  """All values that are not equal to given value."""
  data_not: String

  """All values that are contained in given list."""
  data_in: [String!]

  """All values that are not contained in given list."""
  data_not_in: [String!]

  """All values less than the given value."""
  data_lt: String

  """All values less than or equal the given value."""
  data_lte: String

  """All values greater than the given value."""
  data_gt: String

  """All values greater than or equal the given value."""
  data_gte: String

  """All values containing the given string."""
  data_contains: String

  """All values not containing the given string."""
  data_not_contains: String

  """All values starting with the given string."""
  data_starts_with: String

  """All values not starting with the given string."""
  data_not_starts_with: String

  """All values ending with the given string."""
  data_ends_with: String

  """All values not ending with the given string."""
  data_not_ends_with: String
  viewed: Boolean

  """All values that are not equal to given value."""
  viewed_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  createdBy: UserWhereInput
}

input NotificationWhereUniqueInput {
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Permission implements Node {
  id: ID!
  user: User!
  accessType: PermissionAccessType!
  accessLevel: PermissionAccessLevel!
}

enum PermissionAccessLevel {
  NONE
  OWNER
  ALL
  ADMIN
  SUPER
}

enum PermissionAccessType {
  CREATE_USER
  READ_USER
  UPDATE_USER
  READ_NOTIFICATION
  UPDATE_NOTIFICATION
}

"""A connection to a list of items."""
type PermissionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PermissionEdge]!
  aggregate: AggregatePermission!
}

input PermissionCreateInput {
  accessType: PermissionAccessType!
  accessLevel: PermissionAccessLevel!
  user: UserCreateOneWithoutPermissionsInput!
}

input PermissionCreateManyWithoutUserInput {
  create: [PermissionCreateWithoutUserInput!]
  connect: [PermissionWhereUniqueInput!]
}

input PermissionCreateWithoutUserInput {
  accessType: PermissionAccessType!
  accessLevel: PermissionAccessLevel!
}

"""An edge in a connection."""
type PermissionEdge {
  """The item at the end of the edge."""
  node: Permission!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PermissionOrderByInput {
  id_ASC
  id_DESC
  accessType_ASC
  accessType_DESC
  accessLevel_ASC
  accessLevel_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PermissionPreviousValues {
  id: ID!
  accessType: PermissionAccessType!
  accessLevel: PermissionAccessLevel!
}

type PermissionSubscriptionPayload {
  mutation: MutationType!
  node: Permission
  updatedFields: [String!]
  previousValues: PermissionPreviousValues
}

input PermissionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PermissionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PermissionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PermissionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PermissionWhereInput
}

input PermissionUpdateInput {
  accessType: PermissionAccessType
  accessLevel: PermissionAccessLevel
  user: UserUpdateOneRequiredWithoutPermissionsInput
}

input PermissionUpdateManyWithoutUserInput {
  create: [PermissionCreateWithoutUserInput!]
  connect: [PermissionWhereUniqueInput!]
  disconnect: [PermissionWhereUniqueInput!]
  delete: [PermissionWhereUniqueInput!]
  update: [PermissionUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [PermissionUpsertWithWhereUniqueWithoutUserInput!]
}

input PermissionUpdateWithoutUserDataInput {
  accessType: PermissionAccessType
  accessLevel: PermissionAccessLevel
}

input PermissionUpdateWithWhereUniqueWithoutUserInput {
  where: PermissionWhereUniqueInput!
  data: PermissionUpdateWithoutUserDataInput!
}

input PermissionUpsertWithWhereUniqueWithoutUserInput {
  where: PermissionWhereUniqueInput!
  update: PermissionUpdateWithoutUserDataInput!
  create: PermissionCreateWithoutUserInput!
}

input PermissionWhereInput {
  """Logical AND on all given filters."""
  AND: [PermissionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PermissionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PermissionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  accessType: PermissionAccessType

  """All values that are not equal to given value."""
  accessType_not: PermissionAccessType

  """All values that are contained in given list."""
  accessType_in: [PermissionAccessType!]

  """All values that are not contained in given list."""
  accessType_not_in: [PermissionAccessType!]
  accessLevel: PermissionAccessLevel

  """All values that are not equal to given value."""
  accessLevel_not: PermissionAccessLevel

  """All values that are contained in given list."""
  accessLevel_in: [PermissionAccessLevel!]

  """All values that are not contained in given list."""
  accessLevel_not_in: [PermissionAccessLevel!]
  user: UserWhereInput
}

input PermissionWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  permissions(where: PermissionWhereInput, orderBy: PermissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Permission]!
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification]!
  user(where: UserWhereUniqueInput!): User
  permission(where: PermissionWhereUniqueInput!): Permission
  notification(where: NotificationWhereUniqueInput!): Notification
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  permissionsConnection(where: PermissionWhereInput, orderBy: PermissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PermissionConnection!
  notificationsConnection(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NotificationConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  permission(where: PermissionSubscriptionWhereInput): PermissionSubscriptionPayload
  notification(where: NotificationSubscriptionWhereInput): NotificationSubscriptionPayload
}

type User implements Node {
  id: ID!
  firstName: String
  lastName: String
  username: String!
  email: String!
  password: String!
  lastPasswordChange: DateTime!
  confirmed: Boolean!
  permissions(where: PermissionWhereInput, orderBy: PermissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Permission!]
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification!]
  receiveEmailNotifications: Boolean!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  firstName: String
  lastName: String
  username: String!
  email: String!
  password: String!
  lastPasswordChange: DateTime!
  confirmed: Boolean
  receiveEmailNotifications: Boolean
  permissions: PermissionCreateManyWithoutUserInput
  notifications: NotificationCreateManyWithoutCreatedByInput
}

input UserCreateOneWithoutNotificationsInput {
  create: UserCreateWithoutNotificationsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPermissionsInput {
  create: UserCreateWithoutPermissionsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutNotificationsInput {
  firstName: String
  lastName: String
  username: String!
  email: String!
  password: String!
  lastPasswordChange: DateTime!
  confirmed: Boolean
  receiveEmailNotifications: Boolean
  permissions: PermissionCreateManyWithoutUserInput
}

input UserCreateWithoutPermissionsInput {
  firstName: String
  lastName: String
  username: String!
  email: String!
  password: String!
  lastPasswordChange: DateTime!
  confirmed: Boolean
  receiveEmailNotifications: Boolean
  notifications: NotificationCreateManyWithoutCreatedByInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  lastPasswordChange_ASC
  lastPasswordChange_DESC
  confirmed_ASC
  confirmed_DESC
  receiveEmailNotifications_ASC
  receiveEmailNotifications_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  firstName: String
  lastName: String
  username: String!
  email: String!
  password: String!
  lastPasswordChange: DateTime!
  confirmed: Boolean!
  receiveEmailNotifications: Boolean!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  firstName: String
  lastName: String
  username: String
  email: String
  password: String
  lastPasswordChange: DateTime
  confirmed: Boolean
  receiveEmailNotifications: Boolean
  permissions: PermissionUpdateManyWithoutUserInput
  notifications: NotificationUpdateManyWithoutCreatedByInput
}

input UserUpdateOneRequiredWithoutNotificationsInput {
  create: UserCreateWithoutNotificationsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutNotificationsDataInput
  upsert: UserUpsertWithoutNotificationsInput
}

input UserUpdateOneRequiredWithoutPermissionsInput {
  create: UserCreateWithoutPermissionsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutPermissionsDataInput
  upsert: UserUpsertWithoutPermissionsInput
}

input UserUpdateWithoutNotificationsDataInput {
  firstName: String
  lastName: String
  username: String
  email: String
  password: String
  lastPasswordChange: DateTime
  confirmed: Boolean
  receiveEmailNotifications: Boolean
  permissions: PermissionUpdateManyWithoutUserInput
}

input UserUpdateWithoutPermissionsDataInput {
  firstName: String
  lastName: String
  username: String
  email: String
  password: String
  lastPasswordChange: DateTime
  confirmed: Boolean
  receiveEmailNotifications: Boolean
  notifications: NotificationUpdateManyWithoutCreatedByInput
}

input UserUpsertWithoutNotificationsInput {
  update: UserUpdateWithoutNotificationsDataInput!
  create: UserCreateWithoutNotificationsInput!
}

input UserUpsertWithoutPermissionsInput {
  update: UserUpdateWithoutPermissionsDataInput!
  create: UserCreateWithoutPermissionsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  lastPasswordChange: DateTime

  """All values that are not equal to given value."""
  lastPasswordChange_not: DateTime

  """All values that are contained in given list."""
  lastPasswordChange_in: [DateTime!]

  """All values that are not contained in given list."""
  lastPasswordChange_not_in: [DateTime!]

  """All values less than the given value."""
  lastPasswordChange_lt: DateTime

  """All values less than or equal the given value."""
  lastPasswordChange_lte: DateTime

  """All values greater than the given value."""
  lastPasswordChange_gt: DateTime

  """All values greater than or equal the given value."""
  lastPasswordChange_gte: DateTime
  confirmed: Boolean

  """All values that are not equal to given value."""
  confirmed_not: Boolean
  receiveEmailNotifications: Boolean

  """All values that are not equal to given value."""
  receiveEmailNotifications_not: Boolean
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  permissions_every: PermissionWhereInput
  permissions_some: PermissionWhereInput
  permissions_none: PermissionWhereInput
  notifications_every: NotificationWhereInput
  notifications_some: NotificationWhereInput
  notifications_none: NotificationWhereInput
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}
