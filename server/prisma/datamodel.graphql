type User {
  id: ID! @unique
  firstName: String
  lastName: String
  username: String! @unique
  email: String! @unique
  password: String!
  lastPasswordChange: DateTime!
  confirmed: Boolean! @default(value: "false")
  permissions: [Permission!]! @relation(name: "UserPermissions" onDelete: CASCADE)
  notifications: [Notification!]! @relation(name: "UserNotifications" onDelete: CASCADE)

  receiveEmailNotifications: Boolean! @default(value: "true")

  updatedAt: DateTime!
}

type Permission {
  id: ID! @unique
  user: User! @relation(name: "UserPermissions")
  accessType: PermissionAccessType!
  accessLevel: PermissionAccessLevel!
}

enum PermissionAccessType {
  CREATE_USER
  READ_USER
  UPDATE_USER

  READ_NOTIFICATION
  UPDATE_NOTIFICATION
}

enum PermissionAccessLevel {
  NONE #no access 0
  OWNER #access owner only 1
  ALL #access all of a collection 2, cannot access protected fields
  ADMIN #access all of a collection 3, can access protected fields
  SUPER #super user who cannot be tampered with 4
}

type Notification {
  id: ID! @unique
  notificationType: NotificationType!
  data: String!
  viewed: Boolean! @default(value: "false")
  createdBy: User! @relation(name: "UserNotifications")
  createdAt: DateTime!
}

enum NotificationType {
  WELCOME
  INVITE_ACCEPTED
  PASSWORD_CHANGED
  USER_SETTINGS_UPDATED
}
